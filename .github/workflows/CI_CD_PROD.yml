name: Backend_CI_CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

jobs:
  quality-security:
    name: Code Quality and Security scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@0.33.0
        with:
          scan-type: fs
          scan-ref: .

  docker-release:
    name: Build and Release Docker
    runs-on: ubuntu-latest
    needs: [quality-security]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Compute IMAGE_NAME (lower-case)
        id: compute
        run: |
          IMAGE_NAME="ghcr.io/$(echo "$GITHUB_REPOSITORY" | tr '[:upper:]' '[:lower:]')"
          echo "image_name=$IMAGE_NAME" >> "$GITHUB_OUTPUT"

      - name: Log in to GHCR (GITHUB_TOKEN)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        env:
          APP_PATH: ./cmd
        run: |
          docker build \
            --build-arg APP_PATH="${APP_PATH}" \
            -t "${{ steps.compute.outputs.image_name }}:latest" \
            -t "${{ steps.compute.outputs.image_name }}:${{ github.run_number }}" .

      - name: Push Docker image
        run: |
          docker push "${{ steps.compute.outputs.image_name }}:latest"
          docker push "${{ steps.compute.outputs.image_name }}:${{ github.run_number }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: "Backend Release v${{ github.run_number }}"
          body: |
            Backend image pushed
            - Docker image: ${{ steps.compute.outputs.image_name }}:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy to VPS (compose + env from secrets)
    runs-on: ubuntu-latest
    needs: [docker-release]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Upload compose files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT }}
          source: |
            docker-compose.prod.yml
            mongo-init.js
          target: /opt/ecrireback
          strip_components: 0
          overwrite: true

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        env:
          GH_REPO: ${{ github.repository }}
          GH_USER: ${{ github.actor }}
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
          BACKEND_PORT: ${{ secrets.BACKEND_PORT }}
          GIN_MODE: ${{ secrets.GIN_MODE }}
          ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS }}
          MONGO_ROOT_USER: ${{ secrets.MONGO_ROOT_USER }}
          MONGO_ROOT_PASSWORD: ${{ secrets.MONGO_ROOT_PASSWORD }}
          MONGO_DB: ${{ secrets.MONGO_DB }}
          MONGO_APP_USER: ${{ secrets.MONGO_APP_USER }}
          MONGO_APP_PASSWORD: ${{ secrets.MONGO_APP_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT }}
          envs: GH_REPO,GH_USER,GHCR_PAT,BACKEND_PORT,GIN_MODE,ALLOWED_ORIGINS,MONGO_ROOT_USER,MONGO_ROOT_PASSWORD,MONGO_DB,MONGO_APP_USER,MONGO_APP_PASSWORD,REDIS_PASSWORD
          script: |
            set -euo pipefail

            APP_DIR="/opt/ecrireback"
            cd "$APP_DIR"

            : "${BACKEND_PORT:=8081}"
            : "${GIN_MODE:=release}"
            : "${ALLOWED_ORIGINS:=}"
            : "${MONGO_DB:=ecrire}"

            if [ -z "${MONGO_ROOT_USER:-}" ] || [ -z "${MONGO_ROOT_PASSWORD:-}" ] || [ -z "${MONGO_APP_USER:-}" ] || [ -z "${MONGO_APP_PASSWORD:-}" ] || [ -z "${REDIS_PASSWORD:-}" ]; then
              echo "ERROR: Missing required secrets for DB/Redis." >&2
              exit 1
            fi

            umask 077
            {
              echo "BACKEND_PORT=${BACKEND_PORT}"
              echo "APP_PORT=${BACKEND_PORT}"
              echo "GIN_MODE=${GIN_MODE}"
              echo "ALLOWED_ORIGINS=${ALLOWED_ORIGINS}"
              echo "MONGO_ROOT_USER=${MONGO_ROOT_USER}"
              echo "MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}"
              echo "MONGO_DB=${MONGO_DB}"
              echo "MONGO_APP_USER=${MONGO_APP_USER}"
              echo "MONGO_APP_PASSWORD=${MONGO_APP_PASSWORD}"
              echo "REDIS_PASSWORD=${REDIS_PASSWORD}"
            } > .env

            if [ -n "${GHCR_PAT:-}" ]; then
              echo "$GHCR_PAT" | docker login ghcr.io -u "$GH_USER" --password-stdin
            fi

            IMAGE_NAME="ghcr.io/$(echo "$GH_REPO" | tr '[:upper:]' '[:lower:]')"
            echo "Using image: ${IMAGE_NAME}:latest"

            docker compose -f docker-compose.prod.yml --env-file .env pull
            docker compose -f docker-compose.prod.yml --env-file .env up -d

            docker image prune -f || true

            if [ -n "${GHCR_PAT:-}" ]; then
              docker logout ghcr.io || true
            fi

            echo "Deploy complete."